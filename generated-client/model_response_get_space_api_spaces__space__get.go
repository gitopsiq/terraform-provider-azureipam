/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// ResponseGetSpaceApiSpacesSpaceGet struct for ResponseGetSpaceApiSpacesSpaceGet
type ResponseGetSpaceApiSpacesSpaceGet struct {
	Space *Space
	SpaceBasic *SpaceBasic
	SpaceBasicUtil *SpaceBasicUtil
	SpaceExpand *SpaceExpand
	SpaceExpandUtil *SpaceExpandUtil
	SpaceUtil *SpaceUtil
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseGetSpaceApiSpacesSpaceGet) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Space
	err = json.Unmarshal(data, &dst.Space);
	if err == nil {
		jsonSpace, _ := json.Marshal(dst.Space)
		if string(jsonSpace) == "{}" { // empty struct
			dst.Space = nil
		} else {
			return nil // data stored in dst.Space, return on the first match
		}
	} else {
		dst.Space = nil
	}

	// try to unmarshal JSON data into SpaceBasic
	err = json.Unmarshal(data, &dst.SpaceBasic);
	if err == nil {
		jsonSpaceBasic, _ := json.Marshal(dst.SpaceBasic)
		if string(jsonSpaceBasic) == "{}" { // empty struct
			dst.SpaceBasic = nil
		} else {
			return nil // data stored in dst.SpaceBasic, return on the first match
		}
	} else {
		dst.SpaceBasic = nil
	}

	// try to unmarshal JSON data into SpaceBasicUtil
	err = json.Unmarshal(data, &dst.SpaceBasicUtil);
	if err == nil {
		jsonSpaceBasicUtil, _ := json.Marshal(dst.SpaceBasicUtil)
		if string(jsonSpaceBasicUtil) == "{}" { // empty struct
			dst.SpaceBasicUtil = nil
		} else {
			return nil // data stored in dst.SpaceBasicUtil, return on the first match
		}
	} else {
		dst.SpaceBasicUtil = nil
	}

	// try to unmarshal JSON data into SpaceExpand
	err = json.Unmarshal(data, &dst.SpaceExpand);
	if err == nil {
		jsonSpaceExpand, _ := json.Marshal(dst.SpaceExpand)
		if string(jsonSpaceExpand) == "{}" { // empty struct
			dst.SpaceExpand = nil
		} else {
			return nil // data stored in dst.SpaceExpand, return on the first match
		}
	} else {
		dst.SpaceExpand = nil
	}

	// try to unmarshal JSON data into SpaceExpandUtil
	err = json.Unmarshal(data, &dst.SpaceExpandUtil);
	if err == nil {
		jsonSpaceExpandUtil, _ := json.Marshal(dst.SpaceExpandUtil)
		if string(jsonSpaceExpandUtil) == "{}" { // empty struct
			dst.SpaceExpandUtil = nil
		} else {
			return nil // data stored in dst.SpaceExpandUtil, return on the first match
		}
	} else {
		dst.SpaceExpandUtil = nil
	}

	// try to unmarshal JSON data into SpaceUtil
	err = json.Unmarshal(data, &dst.SpaceUtil);
	if err == nil {
		jsonSpaceUtil, _ := json.Marshal(dst.SpaceUtil)
		if string(jsonSpaceUtil) == "{}" { // empty struct
			dst.SpaceUtil = nil
		} else {
			return nil // data stored in dst.SpaceUtil, return on the first match
		}
	} else {
		dst.SpaceUtil = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResponseGetSpaceApiSpacesSpaceGet)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResponseGetSpaceApiSpacesSpaceGet) MarshalJSON() ([]byte, error) {
	if src.Space != nil {
		return json.Marshal(&src.Space)
	}

	if src.SpaceBasic != nil {
		return json.Marshal(&src.SpaceBasic)
	}

	if src.SpaceBasicUtil != nil {
		return json.Marshal(&src.SpaceBasicUtil)
	}

	if src.SpaceExpand != nil {
		return json.Marshal(&src.SpaceExpand)
	}

	if src.SpaceExpandUtil != nil {
		return json.Marshal(&src.SpaceExpandUtil)
	}

	if src.SpaceUtil != nil {
		return json.Marshal(&src.SpaceUtil)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableResponseGetSpaceApiSpacesSpaceGet struct {
	value *ResponseGetSpaceApiSpacesSpaceGet
	isSet bool
}

func (v NullableResponseGetSpaceApiSpacesSpaceGet) Get() *ResponseGetSpaceApiSpacesSpaceGet {
	return v.value
}

func (v *NullableResponseGetSpaceApiSpacesSpaceGet) Set(val *ResponseGetSpaceApiSpacesSpaceGet) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseGetSpaceApiSpacesSpaceGet) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseGetSpaceApiSpacesSpaceGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseGetSpaceApiSpacesSpaceGet(val *ResponseGetSpaceApiSpacesSpaceGet) *NullableResponseGetSpaceApiSpacesSpaceGet {
	return &NullableResponseGetSpaceApiSpacesSpaceGet{value: val, isSet: true}
}

func (v NullableResponseGetSpaceApiSpacesSpaceGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseGetSpaceApiSpacesSpaceGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


