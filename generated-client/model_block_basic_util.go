/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockBasicUtil type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockBasicUtil{}

// BlockBasicUtil DOCSTRING
type BlockBasicUtil struct {
	Name string `json:"name"`
	Cidr string `json:"cidr"`
	Vnets []VNet `json:"vnets"`
	Externals []ExtNet `json:"externals"`
	Resv []Reservation `json:"resv"`
	Size int32 `json:"size"`
	Used int32 `json:"used"`
}

type _BlockBasicUtil BlockBasicUtil

// NewBlockBasicUtil instantiates a new BlockBasicUtil object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockBasicUtil(name string, cidr string, vnets []VNet, externals []ExtNet, resv []Reservation, size int32, used int32) *BlockBasicUtil {
	this := BlockBasicUtil{}
	this.Name = name
	this.Cidr = cidr
	this.Vnets = vnets
	this.Externals = externals
	this.Resv = resv
	this.Size = size
	this.Used = used
	return &this
}

// NewBlockBasicUtilWithDefaults instantiates a new BlockBasicUtil object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockBasicUtilWithDefaults() *BlockBasicUtil {
	this := BlockBasicUtil{}
	return &this
}

// GetName returns the Name field value
func (o *BlockBasicUtil) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BlockBasicUtil) SetName(v string) {
	o.Name = v
}

// GetCidr returns the Cidr field value
func (o *BlockBasicUtil) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *BlockBasicUtil) SetCidr(v string) {
	o.Cidr = v
}

// GetVnets returns the Vnets field value
func (o *BlockBasicUtil) GetVnets() []VNet {
	if o == nil {
		var ret []VNet
		return ret
	}

	return o.Vnets
}

// GetVnetsOk returns a tuple with the Vnets field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetVnetsOk() ([]VNet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vnets, true
}

// SetVnets sets field value
func (o *BlockBasicUtil) SetVnets(v []VNet) {
	o.Vnets = v
}

// GetExternals returns the Externals field value
func (o *BlockBasicUtil) GetExternals() []ExtNet {
	if o == nil {
		var ret []ExtNet
		return ret
	}

	return o.Externals
}

// GetExternalsOk returns a tuple with the Externals field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetExternalsOk() ([]ExtNet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Externals, true
}

// SetExternals sets field value
func (o *BlockBasicUtil) SetExternals(v []ExtNet) {
	o.Externals = v
}

// GetResv returns the Resv field value
func (o *BlockBasicUtil) GetResv() []Reservation {
	if o == nil {
		var ret []Reservation
		return ret
	}

	return o.Resv
}

// GetResvOk returns a tuple with the Resv field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetResvOk() ([]Reservation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resv, true
}

// SetResv sets field value
func (o *BlockBasicUtil) SetResv(v []Reservation) {
	o.Resv = v
}

// GetSize returns the Size field value
func (o *BlockBasicUtil) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *BlockBasicUtil) SetSize(v int32) {
	o.Size = v
}

// GetUsed returns the Used field value
func (o *BlockBasicUtil) GetUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *BlockBasicUtil) GetUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *BlockBasicUtil) SetUsed(v int32) {
	o.Used = v
}

func (o BlockBasicUtil) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockBasicUtil) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cidr"] = o.Cidr
	toSerialize["vnets"] = o.Vnets
	toSerialize["externals"] = o.Externals
	toSerialize["resv"] = o.Resv
	toSerialize["size"] = o.Size
	toSerialize["used"] = o.Used
	return toSerialize, nil
}

func (o *BlockBasicUtil) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cidr",
		"vnets",
		"externals",
		"resv",
		"size",
		"used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockBasicUtil := _BlockBasicUtil{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockBasicUtil)

	if err != nil {
		return err
	}

	*o = BlockBasicUtil(varBlockBasicUtil)

	return err
}

type NullableBlockBasicUtil struct {
	value *BlockBasicUtil
	isSet bool
}

func (v NullableBlockBasicUtil) Get() *BlockBasicUtil {
	return v.value
}

func (v *NullableBlockBasicUtil) Set(val *BlockBasicUtil) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockBasicUtil) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockBasicUtil) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockBasicUtil(val *BlockBasicUtil) *NullableBlockBasicUtil {
	return &NullableBlockBasicUtil{value: val, isSet: true}
}

func (v NullableBlockBasicUtil) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockBasicUtil) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


