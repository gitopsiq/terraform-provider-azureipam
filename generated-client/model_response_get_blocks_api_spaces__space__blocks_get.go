/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// ResponseGetBlocksApiSpacesSpaceBlocksGet struct for ResponseGetBlocksApiSpacesSpaceBlocksGet
type ResponseGetBlocksApiSpacesSpaceBlocksGet struct {
	ArrayOfBlock *[]Block
	ArrayOfBlockBasic *[]BlockBasic
	ArrayOfBlockBasicUtil *[]BlockBasicUtil
	ArrayOfBlockExpand *[]BlockExpand
	ArrayOfBlockExpandUtil *[]BlockExpandUtil
	ArrayOfBlockUtil *[]BlockUtil
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseGetBlocksApiSpacesSpaceBlocksGet) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfBlock
	err = json.Unmarshal(data, &dst.ArrayOfBlock);
	if err == nil {
		jsonArrayOfBlock, _ := json.Marshal(dst.ArrayOfBlock)
		if string(jsonArrayOfBlock) == "{}" { // empty struct
			dst.ArrayOfBlock = nil
		} else {
			return nil // data stored in dst.ArrayOfBlock, return on the first match
		}
	} else {
		dst.ArrayOfBlock = nil
	}

	// try to unmarshal JSON data into ArrayOfBlockBasic
	err = json.Unmarshal(data, &dst.ArrayOfBlockBasic);
	if err == nil {
		jsonArrayOfBlockBasic, _ := json.Marshal(dst.ArrayOfBlockBasic)
		if string(jsonArrayOfBlockBasic) == "{}" { // empty struct
			dst.ArrayOfBlockBasic = nil
		} else {
			return nil // data stored in dst.ArrayOfBlockBasic, return on the first match
		}
	} else {
		dst.ArrayOfBlockBasic = nil
	}

	// try to unmarshal JSON data into ArrayOfBlockBasicUtil
	err = json.Unmarshal(data, &dst.ArrayOfBlockBasicUtil);
	if err == nil {
		jsonArrayOfBlockBasicUtil, _ := json.Marshal(dst.ArrayOfBlockBasicUtil)
		if string(jsonArrayOfBlockBasicUtil) == "{}" { // empty struct
			dst.ArrayOfBlockBasicUtil = nil
		} else {
			return nil // data stored in dst.ArrayOfBlockBasicUtil, return on the first match
		}
	} else {
		dst.ArrayOfBlockBasicUtil = nil
	}

	// try to unmarshal JSON data into ArrayOfBlockExpand
	err = json.Unmarshal(data, &dst.ArrayOfBlockExpand);
	if err == nil {
		jsonArrayOfBlockExpand, _ := json.Marshal(dst.ArrayOfBlockExpand)
		if string(jsonArrayOfBlockExpand) == "{}" { // empty struct
			dst.ArrayOfBlockExpand = nil
		} else {
			return nil // data stored in dst.ArrayOfBlockExpand, return on the first match
		}
	} else {
		dst.ArrayOfBlockExpand = nil
	}

	// try to unmarshal JSON data into ArrayOfBlockExpandUtil
	err = json.Unmarshal(data, &dst.ArrayOfBlockExpandUtil);
	if err == nil {
		jsonArrayOfBlockExpandUtil, _ := json.Marshal(dst.ArrayOfBlockExpandUtil)
		if string(jsonArrayOfBlockExpandUtil) == "{}" { // empty struct
			dst.ArrayOfBlockExpandUtil = nil
		} else {
			return nil // data stored in dst.ArrayOfBlockExpandUtil, return on the first match
		}
	} else {
		dst.ArrayOfBlockExpandUtil = nil
	}

	// try to unmarshal JSON data into ArrayOfBlockUtil
	err = json.Unmarshal(data, &dst.ArrayOfBlockUtil);
	if err == nil {
		jsonArrayOfBlockUtil, _ := json.Marshal(dst.ArrayOfBlockUtil)
		if string(jsonArrayOfBlockUtil) == "{}" { // empty struct
			dst.ArrayOfBlockUtil = nil
		} else {
			return nil // data stored in dst.ArrayOfBlockUtil, return on the first match
		}
	} else {
		dst.ArrayOfBlockUtil = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResponseGetBlocksApiSpacesSpaceBlocksGet)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResponseGetBlocksApiSpacesSpaceBlocksGet) MarshalJSON() ([]byte, error) {
	if src.ArrayOfBlock != nil {
		return json.Marshal(&src.ArrayOfBlock)
	}

	if src.ArrayOfBlockBasic != nil {
		return json.Marshal(&src.ArrayOfBlockBasic)
	}

	if src.ArrayOfBlockBasicUtil != nil {
		return json.Marshal(&src.ArrayOfBlockBasicUtil)
	}

	if src.ArrayOfBlockExpand != nil {
		return json.Marshal(&src.ArrayOfBlockExpand)
	}

	if src.ArrayOfBlockExpandUtil != nil {
		return json.Marshal(&src.ArrayOfBlockExpandUtil)
	}

	if src.ArrayOfBlockUtil != nil {
		return json.Marshal(&src.ArrayOfBlockUtil)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableResponseGetBlocksApiSpacesSpaceBlocksGet struct {
	value *ResponseGetBlocksApiSpacesSpaceBlocksGet
	isSet bool
}

func (v NullableResponseGetBlocksApiSpacesSpaceBlocksGet) Get() *ResponseGetBlocksApiSpacesSpaceBlocksGet {
	return v.value
}

func (v *NullableResponseGetBlocksApiSpacesSpaceBlocksGet) Set(val *ResponseGetBlocksApiSpacesSpaceBlocksGet) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseGetBlocksApiSpacesSpaceBlocksGet) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseGetBlocksApiSpacesSpaceBlocksGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseGetBlocksApiSpacesSpaceBlocksGet(val *ResponseGetBlocksApiSpacesSpaceBlocksGet) *NullableResponseGetBlocksApiSpacesSpaceBlocksGet {
	return &NullableResponseGetBlocksApiSpacesSpaceBlocksGet{value: val, isSet: true}
}

func (v NullableResponseGetBlocksApiSpacesSpaceBlocksGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseGetBlocksApiSpacesSpaceBlocksGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


