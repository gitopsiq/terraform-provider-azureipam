/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserExpand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserExpand{}

// UserExpand DOCSTRING
type UserExpand struct {
	Id string `json:"id"`
	DarkMode bool `json:"darkMode"`
	ApiRefresh int32 `json:"apiRefresh"`
	IsAdmin bool `json:"isAdmin"`
	Views map[string]ViewSettings `json:"views"`
}

type _UserExpand UserExpand

// NewUserExpand instantiates a new UserExpand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserExpand(id string, darkMode bool, apiRefresh int32, isAdmin bool, views map[string]ViewSettings) *UserExpand {
	this := UserExpand{}
	this.Id = id
	this.DarkMode = darkMode
	this.ApiRefresh = apiRefresh
	this.IsAdmin = isAdmin
	this.Views = views
	return &this
}

// NewUserExpandWithDefaults instantiates a new UserExpand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserExpandWithDefaults() *UserExpand {
	this := UserExpand{}
	return &this
}

// GetId returns the Id field value
func (o *UserExpand) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserExpand) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserExpand) SetId(v string) {
	o.Id = v
}

// GetDarkMode returns the DarkMode field value
func (o *UserExpand) GetDarkMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DarkMode
}

// GetDarkModeOk returns a tuple with the DarkMode field value
// and a boolean to check if the value has been set.
func (o *UserExpand) GetDarkModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DarkMode, true
}

// SetDarkMode sets field value
func (o *UserExpand) SetDarkMode(v bool) {
	o.DarkMode = v
}

// GetApiRefresh returns the ApiRefresh field value
func (o *UserExpand) GetApiRefresh() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApiRefresh
}

// GetApiRefreshOk returns a tuple with the ApiRefresh field value
// and a boolean to check if the value has been set.
func (o *UserExpand) GetApiRefreshOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiRefresh, true
}

// SetApiRefresh sets field value
func (o *UserExpand) SetApiRefresh(v int32) {
	o.ApiRefresh = v
}

// GetIsAdmin returns the IsAdmin field value
func (o *UserExpand) GetIsAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value
// and a boolean to check if the value has been set.
func (o *UserExpand) GetIsAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAdmin, true
}

// SetIsAdmin sets field value
func (o *UserExpand) SetIsAdmin(v bool) {
	o.IsAdmin = v
}

// GetViews returns the Views field value
func (o *UserExpand) GetViews() map[string]ViewSettings {
	if o == nil {
		var ret map[string]ViewSettings
		return ret
	}

	return o.Views
}

// GetViewsOk returns a tuple with the Views field value
// and a boolean to check if the value has been set.
func (o *UserExpand) GetViewsOk() (map[string]ViewSettings, bool) {
	if o == nil {
		return map[string]ViewSettings{}, false
	}
	return o.Views, true
}

// SetViews sets field value
func (o *UserExpand) SetViews(v map[string]ViewSettings) {
	o.Views = v
}

func (o UserExpand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserExpand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["darkMode"] = o.DarkMode
	toSerialize["apiRefresh"] = o.ApiRefresh
	toSerialize["isAdmin"] = o.IsAdmin
	toSerialize["views"] = o.Views
	return toSerialize, nil
}

func (o *UserExpand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"darkMode",
		"apiRefresh",
		"isAdmin",
		"views",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserExpand := _UserExpand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserExpand)

	if err != nil {
		return err
	}

	*o = UserExpand(varUserExpand)

	return err
}

type NullableUserExpand struct {
	value *UserExpand
	isSet bool
}

func (v NullableUserExpand) Get() *UserExpand {
	return v.value
}

func (v *NullableUserExpand) Set(val *UserExpand) {
	v.value = val
	v.isSet = true
}

func (v NullableUserExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableUserExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserExpand(val *UserExpand) *NullableUserExpand {
	return &NullableUserExpand{value: val, isSet: true}
}

func (v NullableUserExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


