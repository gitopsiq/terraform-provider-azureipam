/*
Azure IPAM

Testing SpacesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/gitopsiq/terraform-provider-azureipam/generated-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_SpacesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SpacesAPIService AvailableBlockNetsApiSpacesSpaceBlocksBlockAvailableGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.AvailableBlockNetsApiSpacesSpaceBlocksBlockAvailableGet(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateBlockApiSpacesSpaceBlocksPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.CreateBlockApiSpacesSpaceBlocksPost(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateBlockNetApiSpacesSpaceBlocksBlockNetworksPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.CreateBlockNetApiSpacesSpaceBlocksBlockNetworksPost(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateBlockReservationApiSpacesSpaceBlocksBlockReservationsPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.CreateBlockReservationApiSpacesSpaceBlocksBlockReservationsPost(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateExternalNetworkApiSpacesSpaceBlocksBlockExternalsPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.CreateExternalNetworkApiSpacesSpaceBlocksBlockExternalsPost(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateExternalSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string

		resp, httpRes, err := apiClient.SpacesAPI.CreateExternalSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsPost(context.Background(), space, block, external).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateExternalSubnetEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.CreateExternalSubnetEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsPost(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService CreateMultiBlockReservationApiSpacesSpaceReservationsPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.CreateMultiBlockReservationApiSpacesSpaceReservationsPost(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	// SpaceReq defines the structure of the request for creating a space
	type SpaceReq struct {
		Name        string `json:"name"`
		Description string `json:"description"`
	}

	t.Run("Test SpacesAPIService CreateSpaceApiSpacesPost", func(t *testing.T) {
		spaceReq := SpaceReq{
			Name:        "example-space",
			Description: "An example space",
		}

		resp, httpRes, err := apiClient.SpacesAPI.CreateSpaceApiSpacesPost(context.Background()).SpaceReq(spaceReq).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	/*t.Run("Test SpacesAPIService CreateSpaceApiSpacesPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SpacesAPI.CreateSpaceApiSpacesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})
	*/

	t.Run("Test SpacesAPIService DeleteBlockApiSpacesSpaceBlocksBlockDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteBlockApiSpacesSpaceBlocksBlockDelete(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteBlockNetsApiSpacesSpaceBlocksBlockNetworksDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteBlockNetsApiSpacesSpaceBlocksBlockNetworksDelete(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteBlockReservationsApiSpacesSpaceBlocksBlockReservationsDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		httpRes, err := apiClient.SpacesAPI.DeleteBlockReservationsApiSpacesSpaceBlocksBlockReservationsDelete(context.Background(), space, block).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteBlockReservationsApiSpacesSpaceBlocksBlockReservationsReservationDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var reservation string

		httpRes, err := apiClient.SpacesAPI.DeleteBlockReservationsApiSpacesSpaceBlocksBlockReservationsReservationDelete(context.Background(), space, block, reservation).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteExternalNetworkApiSpacesSpaceBlocksBlockExternalsExternalDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteExternalNetworkApiSpacesSpaceBlocksBlockExternalsExternalDelete(context.Background(), space, block, external).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteExternalSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteExternalSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetDelete(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteExternalSubnetEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsEndpointDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string
		var endpoint string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteExternalSubnetEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsEndpointDelete(context.Background(), space, block, external, subnet, endpoint).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteExternalSubnetEndpointsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteExternalSubnetEndpointsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsDelete(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService DeleteSpaceApiSpacesSpaceDelete", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.DeleteSpaceApiSpacesSpaceDelete(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetBlockApiSpacesSpaceBlocksBlockGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.GetBlockApiSpacesSpaceBlocksBlockGet(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetBlockNetsApiSpacesSpaceBlocksBlockNetworksGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.GetBlockNetsApiSpacesSpaceBlocksBlockNetworksGet(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetBlockReservationsApiSpacesSpaceBlocksBlockReservationsGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.GetBlockReservationsApiSpacesSpaceBlocksBlockReservationsGet(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetBlockReservationsApiSpacesSpaceBlocksBlockReservationsReservationGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var reservation string

		resp, httpRes, err := apiClient.SpacesAPI.GetBlockReservationsApiSpacesSpaceBlocksBlockReservationsReservationGet(context.Background(), space, block, reservation).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetBlocksApiSpacesSpaceBlocksGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.GetBlocksApiSpacesSpaceBlocksGet(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetExternalNetworkApiSpacesSpaceBlocksBlockExternalsExternalGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string

		resp, httpRes, err := apiClient.SpacesAPI.GetExternalNetworkApiSpacesSpaceBlocksBlockExternalsExternalGet(context.Background(), space, block, external).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetExternalNetworksApiSpacesSpaceBlocksBlockExternalsGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.GetExternalNetworksApiSpacesSpaceBlocksBlockExternalsGet(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetExternalSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.GetExternalSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetGet(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetExternalSubnetEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsEndpointGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string
		var endpoint string

		resp, httpRes, err := apiClient.SpacesAPI.GetExternalSubnetEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsEndpointGet(context.Background(), space, block, external, subnet, endpoint).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetExternalSubnetEndpointsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.GetExternalSubnetEndpointsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsGet(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetExternalSubnetsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string

		resp, httpRes, err := apiClient.SpacesAPI.GetExternalSubnetsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsGet(context.Background(), space, block, external).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetMultiBlockReservationsApiSpacesSpaceReservationsGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.GetMultiBlockReservationsApiSpacesSpaceReservationsGet(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetSpaceApiSpacesSpaceGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.GetSpaceApiSpacesSpaceGet(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService GetSpacesApiSpacesGet", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SpacesAPI.GetSpacesApiSpacesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateBlockApiSpacesSpaceBlocksBlockPatch", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateBlockApiSpacesSpaceBlocksBlockPatch(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateBlockVnetsApiSpacesSpaceBlocksBlockNetworksPut", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateBlockVnetsApiSpacesSpaceBlocksBlockNetworksPut(context.Background(), space, block).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateExtEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsEndpointPatch", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string
		var endpoint string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateExtEndpointApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsEndpointPatch(context.Background(), space, block, external, subnet, endpoint).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateExtNetworkApiSpacesSpaceBlocksBlockExternalsExternalPatch", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateExtNetworkApiSpacesSpaceBlocksBlockExternalsExternalPatch(context.Background(), space, block, external).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateExtSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetPatch", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateExtSubnetApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetPatch(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateExternalSubnetEnpointsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsPut", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string
		var block string
		var external string
		var subnet string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateExternalSubnetEnpointsApiSpacesSpaceBlocksBlockExternalsExternalSubnetsSubnetEndpointsPut(context.Background(), space, block, external, subnet).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpacesAPIService UpdateSpaceApiSpacesSpacePatch", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		var space string

		resp, httpRes, err := apiClient.SpacesAPI.UpdateSpaceApiSpacesSpacePatch(context.Background(), space).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
