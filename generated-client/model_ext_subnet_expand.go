/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtSubnetExpand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtSubnetExpand{}

// ExtSubnetExpand DOCSTRING
type ExtSubnetExpand struct {
	Name string `json:"name"`
	Desc string `json:"desc"`
	Space string `json:"space"`
	Block string `json:"block"`
	External string `json:"external"`
	Cidr string `json:"cidr"`
	Endpoints []ExtEndpoint `json:"endpoints"`
}

type _ExtSubnetExpand ExtSubnetExpand

// NewExtSubnetExpand instantiates a new ExtSubnetExpand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtSubnetExpand(name string, desc string, space string, block string, external string, cidr string, endpoints []ExtEndpoint) *ExtSubnetExpand {
	this := ExtSubnetExpand{}
	this.Name = name
	this.Desc = desc
	this.Space = space
	this.Block = block
	this.External = external
	this.Cidr = cidr
	this.Endpoints = endpoints
	return &this
}

// NewExtSubnetExpandWithDefaults instantiates a new ExtSubnetExpand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtSubnetExpandWithDefaults() *ExtSubnetExpand {
	this := ExtSubnetExpand{}
	return &this
}

// GetName returns the Name field value
func (o *ExtSubnetExpand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtSubnetExpand) SetName(v string) {
	o.Name = v
}

// GetDesc returns the Desc field value
func (o *ExtSubnetExpand) GetDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Desc
}

// GetDescOk returns a tuple with the Desc field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desc, true
}

// SetDesc sets field value
func (o *ExtSubnetExpand) SetDesc(v string) {
	o.Desc = v
}

// GetSpace returns the Space field value
func (o *ExtSubnetExpand) GetSpace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Space
}

// GetSpaceOk returns a tuple with the Space field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetSpaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Space, true
}

// SetSpace sets field value
func (o *ExtSubnetExpand) SetSpace(v string) {
	o.Space = v
}

// GetBlock returns the Block field value
func (o *ExtSubnetExpand) GetBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Block
}

// GetBlockOk returns a tuple with the Block field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Block, true
}

// SetBlock sets field value
func (o *ExtSubnetExpand) SetBlock(v string) {
	o.Block = v
}

// GetExternal returns the External field value
func (o *ExtSubnetExpand) GetExternal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.External
}

// GetExternalOk returns a tuple with the External field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetExternalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.External, true
}

// SetExternal sets field value
func (o *ExtSubnetExpand) SetExternal(v string) {
	o.External = v
}

// GetCidr returns the Cidr field value
func (o *ExtSubnetExpand) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *ExtSubnetExpand) SetCidr(v string) {
	o.Cidr = v
}

// GetEndpoints returns the Endpoints field value
func (o *ExtSubnetExpand) GetEndpoints() []ExtEndpoint {
	if o == nil {
		var ret []ExtEndpoint
		return ret
	}

	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetExpand) GetEndpointsOk() ([]ExtEndpoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// SetEndpoints sets field value
func (o *ExtSubnetExpand) SetEndpoints(v []ExtEndpoint) {
	o.Endpoints = v
}

func (o ExtSubnetExpand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtSubnetExpand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["desc"] = o.Desc
	toSerialize["space"] = o.Space
	toSerialize["block"] = o.Block
	toSerialize["external"] = o.External
	toSerialize["cidr"] = o.Cidr
	toSerialize["endpoints"] = o.Endpoints
	return toSerialize, nil
}

func (o *ExtSubnetExpand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"desc",
		"space",
		"block",
		"external",
		"cidr",
		"endpoints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtSubnetExpand := _ExtSubnetExpand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtSubnetExpand)

	if err != nil {
		return err
	}

	*o = ExtSubnetExpand(varExtSubnetExpand)

	return err
}

type NullableExtSubnetExpand struct {
	value *ExtSubnetExpand
	isSet bool
}

func (v NullableExtSubnetExpand) Get() *ExtSubnetExpand {
	return v.value
}

func (v *NullableExtSubnetExpand) Set(val *ExtSubnetExpand) {
	v.value = val
	v.isSet = true
}

func (v NullableExtSubnetExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableExtSubnetExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtSubnetExpand(val *ExtSubnetExpand) *NullableExtSubnetExpand {
	return &NullableExtSubnetExpand{value: val, isSet: true}
}

func (v NullableExtSubnetExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtSubnetExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


