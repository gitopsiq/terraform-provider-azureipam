/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtSubnetReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtSubnetReq{}

// ExtSubnetReq DOCSTRING
type ExtSubnetReq struct {
	Name string `json:"name"`
	Desc NullableString `json:"desc,omitempty"`
	Cidr NullableString `json:"cidr,omitempty" validate:"regexp=x.x.x.x\\/x"`
	Size NullableInt32 `json:"size,omitempty"`
}

type _ExtSubnetReq ExtSubnetReq

// NewExtSubnetReq instantiates a new ExtSubnetReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtSubnetReq(name string) *ExtSubnetReq {
	this := ExtSubnetReq{}
	this.Name = name
	return &this
}

// NewExtSubnetReqWithDefaults instantiates a new ExtSubnetReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtSubnetReqWithDefaults() *ExtSubnetReq {
	this := ExtSubnetReq{}
	return &this
}

// GetName returns the Name field value
func (o *ExtSubnetReq) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtSubnetReq) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtSubnetReq) SetName(v string) {
	o.Name = v
}

// GetDesc returns the Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtSubnetReq) GetDesc() string {
	if o == nil || IsNil(o.Desc.Get()) {
		var ret string
		return ret
	}
	return *o.Desc.Get()
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtSubnetReq) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Desc.Get(), o.Desc.IsSet()
}

// HasDesc returns a boolean if a field has been set.
func (o *ExtSubnetReq) HasDesc() bool {
	if o != nil && o.Desc.IsSet() {
		return true
	}

	return false
}

// SetDesc gets a reference to the given NullableString and assigns it to the Desc field.
func (o *ExtSubnetReq) SetDesc(v string) {
	o.Desc.Set(&v)
}
// SetDescNil sets the value for Desc to be an explicit nil
func (o *ExtSubnetReq) SetDescNil() {
	o.Desc.Set(nil)
}

// UnsetDesc ensures that no value is present for Desc, not even an explicit nil
func (o *ExtSubnetReq) UnsetDesc() {
	o.Desc.Unset()
}

// GetCidr returns the Cidr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtSubnetReq) GetCidr() string {
	if o == nil || IsNil(o.Cidr.Get()) {
		var ret string
		return ret
	}
	return *o.Cidr.Get()
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtSubnetReq) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cidr.Get(), o.Cidr.IsSet()
}

// HasCidr returns a boolean if a field has been set.
func (o *ExtSubnetReq) HasCidr() bool {
	if o != nil && o.Cidr.IsSet() {
		return true
	}

	return false
}

// SetCidr gets a reference to the given NullableString and assigns it to the Cidr field.
func (o *ExtSubnetReq) SetCidr(v string) {
	o.Cidr.Set(&v)
}
// SetCidrNil sets the value for Cidr to be an explicit nil
func (o *ExtSubnetReq) SetCidrNil() {
	o.Cidr.Set(nil)
}

// UnsetCidr ensures that no value is present for Cidr, not even an explicit nil
func (o *ExtSubnetReq) UnsetCidr() {
	o.Cidr.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtSubnetReq) GetSize() int32 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int32
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtSubnetReq) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *ExtSubnetReq) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt32 and assigns it to the Size field.
func (o *ExtSubnetReq) SetSize(v int32) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *ExtSubnetReq) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *ExtSubnetReq) UnsetSize() {
	o.Size.Unset()
}

func (o ExtSubnetReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtSubnetReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Desc.IsSet() {
		toSerialize["desc"] = o.Desc.Get()
	}
	if o.Cidr.IsSet() {
		toSerialize["cidr"] = o.Cidr.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	return toSerialize, nil
}

func (o *ExtSubnetReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtSubnetReq := _ExtSubnetReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtSubnetReq)

	if err != nil {
		return err
	}

	*o = ExtSubnetReq(varExtSubnetReq)

	return err
}

type NullableExtSubnetReq struct {
	value *ExtSubnetReq
	isSet bool
}

func (v NullableExtSubnetReq) Get() *ExtSubnetReq {
	return v.value
}

func (v *NullableExtSubnetReq) Set(val *ExtSubnetReq) {
	v.value = val
	v.isSet = true
}

func (v NullableExtSubnetReq) IsSet() bool {
	return v.isSet
}

func (v *NullableExtSubnetReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtSubnetReq(val *ExtSubnetReq) *NullableExtSubnetReq {
	return &NullableExtSubnetReq{value: val, isSet: true}
}

func (v NullableExtSubnetReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtSubnetReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


