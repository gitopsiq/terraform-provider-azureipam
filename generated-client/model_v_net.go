/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VNet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VNet{}

// VNet DOCSTRING
type VNet struct {
	Id string `json:"id"`
	Active NullableBool `json:"active,omitempty"`
}

type _VNet VNet

// NewVNet instantiates a new VNet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVNet(id string) *VNet {
	this := VNet{}
	this.Id = id
	return &this
}

// NewVNetWithDefaults instantiates a new VNet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVNetWithDefaults() *VNet {
	this := VNet{}
	return &this
}

// GetId returns the Id field value
func (o *VNet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VNet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VNet) SetId(v string) {
	o.Id = v
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VNet) GetActive() bool {
	if o == nil || IsNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VNet) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *VNet) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *VNet) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *VNet) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *VNet) UnsetActive() {
	o.Active.Unset()
}

func (o VNet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VNet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	return toSerialize, nil
}

func (o *VNet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVNet := _VNet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVNet)

	if err != nil {
		return err
	}

	*o = VNet(varVNet)

	return err
}

type NullableVNet struct {
	value *VNet
	isSet bool
}

func (v NullableVNet) Get() *VNet {
	return v.value
}

func (v *NullableVNet) Set(val *VNet) {
	v.value = val
	v.isSet = true
}

func (v NullableVNet) IsSet() bool {
	return v.isSet
}

func (v *NullableVNet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVNet(val *VNet) *NullableVNet {
	return &NullableVNet{value: val, isSet: true}
}

func (v NullableVNet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVNet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


