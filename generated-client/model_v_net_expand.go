/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VNetExpand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VNetExpand{}

// VNetExpand DOCSTRING
type VNetExpand struct {
	Name string `json:"name"`
	Id string `json:"id"`
	Prefixes []string `json:"prefixes"`
	Subnets []Subnet `json:"subnets"`
	ResourceGroup string `json:"resource_group"`
	SubscriptionId string `json:"subscription_id"`
	TenantId string `json:"tenant_id"`
}

type _VNetExpand VNetExpand

// NewVNetExpand instantiates a new VNetExpand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVNetExpand(name string, id string, prefixes []string, subnets []Subnet, resourceGroup string, subscriptionId string, tenantId string) *VNetExpand {
	this := VNetExpand{}
	this.Name = name
	this.Id = id
	this.Prefixes = prefixes
	this.Subnets = subnets
	this.ResourceGroup = resourceGroup
	this.SubscriptionId = subscriptionId
	this.TenantId = tenantId
	return &this
}

// NewVNetExpandWithDefaults instantiates a new VNetExpand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVNetExpandWithDefaults() *VNetExpand {
	this := VNetExpand{}
	return &this
}

// GetName returns the Name field value
func (o *VNetExpand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VNetExpand) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *VNetExpand) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VNetExpand) SetId(v string) {
	o.Id = v
}

// GetPrefixes returns the Prefixes field value
func (o *VNetExpand) GetPrefixes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Prefixes
}

// GetPrefixesOk returns a tuple with the Prefixes field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetPrefixesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefixes, true
}

// SetPrefixes sets field value
func (o *VNetExpand) SetPrefixes(v []string) {
	o.Prefixes = v
}

// GetSubnets returns the Subnets field value
func (o *VNetExpand) GetSubnets() []Subnet {
	if o == nil {
		var ret []Subnet
		return ret
	}

	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetSubnetsOk() ([]Subnet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnets, true
}

// SetSubnets sets field value
func (o *VNetExpand) SetSubnets(v []Subnet) {
	o.Subnets = v
}

// GetResourceGroup returns the ResourceGroup field value
func (o *VNetExpand) GetResourceGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetResourceGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroup, true
}

// SetResourceGroup sets field value
func (o *VNetExpand) SetResourceGroup(v string) {
	o.ResourceGroup = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *VNetExpand) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *VNetExpand) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetTenantId returns the TenantId field value
func (o *VNetExpand) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *VNetExpand) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *VNetExpand) SetTenantId(v string) {
	o.TenantId = v
}

func (o VNetExpand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VNetExpand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	toSerialize["prefixes"] = o.Prefixes
	toSerialize["subnets"] = o.Subnets
	toSerialize["resource_group"] = o.ResourceGroup
	toSerialize["subscription_id"] = o.SubscriptionId
	toSerialize["tenant_id"] = o.TenantId
	return toSerialize, nil
}

func (o *VNetExpand) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
		"prefixes",
		"subnets",
		"resource_group",
		"subscription_id",
		"tenant_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVNetExpand := _VNetExpand{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVNetExpand)

	if err != nil {
		return err
	}

	*o = VNetExpand(varVNetExpand)

	return err
}

type NullableVNetExpand struct {
	value *VNetExpand
	isSet bool
}

func (v NullableVNetExpand) Get() *VNetExpand {
	return v.value
}

func (v *NullableVNetExpand) Set(val *VNetExpand) {
	v.value = val
	v.isSet = true
}

func (v NullableVNetExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableVNetExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVNetExpand(val *VNetExpand) *NullableVNetExpand {
	return &NullableVNetExpand{value: val, isSet: true}
}

func (v NullableVNetExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVNetExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


