/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubnetUtil type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetUtil{}

// SubnetUtil DOCSTRING
type SubnetUtil struct {
	Name string `json:"name"`
	Prefix string `json:"prefix"`
	Size int32 `json:"size"`
	Used int32 `json:"used"`
}

type _SubnetUtil SubnetUtil

// NewSubnetUtil instantiates a new SubnetUtil object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetUtil(name string, prefix string, size int32, used int32) *SubnetUtil {
	this := SubnetUtil{}
	this.Name = name
	this.Prefix = prefix
	this.Size = size
	this.Used = used
	return &this
}

// NewSubnetUtilWithDefaults instantiates a new SubnetUtil object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetUtilWithDefaults() *SubnetUtil {
	this := SubnetUtil{}
	return &this
}

// GetName returns the Name field value
func (o *SubnetUtil) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubnetUtil) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubnetUtil) SetName(v string) {
	o.Name = v
}

// GetPrefix returns the Prefix field value
func (o *SubnetUtil) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *SubnetUtil) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *SubnetUtil) SetPrefix(v string) {
	o.Prefix = v
}

// GetSize returns the Size field value
func (o *SubnetUtil) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SubnetUtil) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SubnetUtil) SetSize(v int32) {
	o.Size = v
}

// GetUsed returns the Used field value
func (o *SubnetUtil) GetUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *SubnetUtil) GetUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *SubnetUtil) SetUsed(v int32) {
	o.Used = v
}

func (o SubnetUtil) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetUtil) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["prefix"] = o.Prefix
	toSerialize["size"] = o.Size
	toSerialize["used"] = o.Used
	return toSerialize, nil
}

func (o *SubnetUtil) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"prefix",
		"size",
		"used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnetUtil := _SubnetUtil{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubnetUtil)

	if err != nil {
		return err
	}

	*o = SubnetUtil(varSubnetUtil)

	return err
}

type NullableSubnetUtil struct {
	value *SubnetUtil
	isSet bool
}

func (v NullableSubnetUtil) Get() *SubnetUtil {
	return v.value
}

func (v *NullableSubnetUtil) Set(val *SubnetUtil) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetUtil) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetUtil) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetUtil(val *SubnetUtil) *NullableSubnetUtil {
	return &NullableSubnetUtil{value: val, isSet: true}
}

func (v NullableSubnetUtil) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetUtil) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


