/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ToolsAPIService ToolsAPI service
type ToolsAPIService service

type ApiCidrCheckApiToolsCidrCheckPostRequest struct {
	ctx context.Context
	ApiService *ToolsAPIService
	cIDRCheckReq *CIDRCheckReq
	authorization *string
}

func (r ApiCidrCheckApiToolsCidrCheckPostRequest) CIDRCheckReq(cIDRCheckReq CIDRCheckReq) ApiCidrCheckApiToolsCidrCheckPostRequest {
	r.cIDRCheckReq = &cIDRCheckReq
	return r
}

// Azure Bearer token
func (r ApiCidrCheckApiToolsCidrCheckPostRequest) Authorization(authorization string) ApiCidrCheckApiToolsCidrCheckPostRequest {
	r.authorization = &authorization
	return r
}

func (r ApiCidrCheckApiToolsCidrCheckPostRequest) Execute() ([]CIDRCheckRes, *http.Response, error) {
	return r.ApiService.CidrCheckApiToolsCidrCheckPostExecute(r)
}

/*
CidrCheckApiToolsCidrCheckPost Find Virtual Networks that Overlap a Given CIDR Range

Get a list of Virtual Networks which overlap a given CIDR range with the following information:

- **cidr**: CIDR range

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCidrCheckApiToolsCidrCheckPostRequest
*/
func (a *ToolsAPIService) CidrCheckApiToolsCidrCheckPost(ctx context.Context) ApiCidrCheckApiToolsCidrCheckPostRequest {
	return ApiCidrCheckApiToolsCidrCheckPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CIDRCheckRes
func (a *ToolsAPIService) CidrCheckApiToolsCidrCheckPostExecute(r ApiCidrCheckApiToolsCidrCheckPostRequest) ([]CIDRCheckRes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CIDRCheckRes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsAPIService.CidrCheckApiToolsCidrCheckPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tools/cidrCheck"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cIDRCheckReq == nil {
		return localVarReturnValue, nil, reportError("cIDRCheckReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "simple", "")
	}
	// body params
	localVarPostBody = r.cIDRCheckReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest struct {
	ctx context.Context
	ApiService *ToolsAPIService
	subnetCIDRReq *SubnetCIDRReq
	authorization *string
}

func (r ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest) SubnetCIDRReq(subnetCIDRReq SubnetCIDRReq) ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest {
	r.subnetCIDRReq = &subnetCIDRReq
	return r
}

// Azure Bearer token
func (r ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest) Authorization(authorization string) ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest {
	r.authorization = &authorization
	return r
}

func (r ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest) Execute() (*NewSubnetCIDR, *http.Response, error) {
	return r.ApiService.NextAvailableSubnetApiToolsNextAvailableSubnetPostExecute(r)
}

/*
NextAvailableSubnetApiToolsNextAvailableSubnetPost Get Next Available Subnet in a Virtual Network

Get the next available Subnet CIDR in a Virtual Network with the following information:

- **vnet_id**: Virtual Network Resource ID
- **size**: Network mask bits
- **reverse_search**:
    - **true**: New subnets will be located as close to the <u>end</u> of the Virtual Network CIDR as possible
    - **false (default)**: New subnets will be located as close to the <u>beginning</u> of the Virtual Network CIDR as possible
- **smallest_cidr**:
    - **true**: New subnets will be created using the smallest possible available CIDR (e.g. it will not break up large CIDR blocks when possible)
    - **false (default)**: New subnets will be created using the first available CIDR, regardless of size

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest
*/
func (a *ToolsAPIService) NextAvailableSubnetApiToolsNextAvailableSubnetPost(ctx context.Context) ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest {
	return ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NewSubnetCIDR
func (a *ToolsAPIService) NextAvailableSubnetApiToolsNextAvailableSubnetPostExecute(r ApiNextAvailableSubnetApiToolsNextAvailableSubnetPostRequest) (*NewSubnetCIDR, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NewSubnetCIDR
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsAPIService.NextAvailableSubnetApiToolsNextAvailableSubnetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tools/nextAvailableSubnet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subnetCIDRReq == nil {
		return localVarReturnValue, nil, reportError("subnetCIDRReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "simple", "")
	}
	// body params
	localVarPostBody = r.subnetCIDRReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest struct {
	ctx context.Context
	ApiService *ToolsAPIService
	vNetCIDRReq *VNetCIDRReq
	authorization *string
}

func (r ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest) VNetCIDRReq(vNetCIDRReq VNetCIDRReq) ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest {
	r.vNetCIDRReq = &vNetCIDRReq
	return r
}

// Azure Bearer token
func (r ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest) Authorization(authorization string) ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest {
	r.authorization = &authorization
	return r
}

func (r ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest) Execute() (*NewVNetCIDR, *http.Response, error) {
	return r.ApiService.NextAvailableVnetApiToolsNextAvailableVNetPostExecute(r)
}

/*
NextAvailableVnetApiToolsNextAvailableVNetPost Get Next Available Virtual Network from a List of Blocks

Get the next available Virtual Network CIDR in a list of Blocks with the following information:

- **space**: Space name
- **blocks**: Array of Block names (*Evaluated in the order provided*)
- **size**: Network mask bits
- **reverse_search**:
    - **true**: New networks will be created as close to the <u>end</u> of the block as possible
    - **false (default)**: New networks will be created as close to the <u>beginning</u> of the block as possible
- **smallest_cidr**:
    - **true**: New networks will be created using the smallest possible available block (e.g. it will not break up large CIDR blocks when possible)
    - **false (default)**: New networks will be created using the first available block, regardless of size

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest
*/
func (a *ToolsAPIService) NextAvailableVnetApiToolsNextAvailableVNetPost(ctx context.Context) ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest {
	return ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NewVNetCIDR
func (a *ToolsAPIService) NextAvailableVnetApiToolsNextAvailableVNetPostExecute(r ApiNextAvailableVnetApiToolsNextAvailableVNetPostRequest) (*NewVNetCIDR, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NewVNetCIDR
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ToolsAPIService.NextAvailableVnetApiToolsNextAvailableVNetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tools/nextAvailableVNet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vNetCIDRReq == nil {
		return localVarReturnValue, nil, reportError("vNetCIDRReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "simple", "")
	}
	// body params
	localVarPostBody = r.vNetCIDRReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
