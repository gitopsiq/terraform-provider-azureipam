/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpaceBasicUtil type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceBasicUtil{}

// SpaceBasicUtil DOCSTRING
type SpaceBasicUtil struct {
	Name string `json:"name"`
	Desc string `json:"desc"`
	Blocks []BlockBasicUtil `json:"blocks"`
	Size int32 `json:"size"`
	Used int32 `json:"used"`
}

type _SpaceBasicUtil SpaceBasicUtil

// NewSpaceBasicUtil instantiates a new SpaceBasicUtil object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceBasicUtil(name string, desc string, blocks []BlockBasicUtil, size int32, used int32) *SpaceBasicUtil {
	this := SpaceBasicUtil{}
	this.Name = name
	this.Desc = desc
	this.Blocks = blocks
	this.Size = size
	this.Used = used
	return &this
}

// NewSpaceBasicUtilWithDefaults instantiates a new SpaceBasicUtil object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceBasicUtilWithDefaults() *SpaceBasicUtil {
	this := SpaceBasicUtil{}
	return &this
}

// GetName returns the Name field value
func (o *SpaceBasicUtil) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpaceBasicUtil) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpaceBasicUtil) SetName(v string) {
	o.Name = v
}

// GetDesc returns the Desc field value
func (o *SpaceBasicUtil) GetDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Desc
}

// GetDescOk returns a tuple with the Desc field value
// and a boolean to check if the value has been set.
func (o *SpaceBasicUtil) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desc, true
}

// SetDesc sets field value
func (o *SpaceBasicUtil) SetDesc(v string) {
	o.Desc = v
}

// GetBlocks returns the Blocks field value
func (o *SpaceBasicUtil) GetBlocks() []BlockBasicUtil {
	if o == nil {
		var ret []BlockBasicUtil
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *SpaceBasicUtil) GetBlocksOk() ([]BlockBasicUtil, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks, true
}

// SetBlocks sets field value
func (o *SpaceBasicUtil) SetBlocks(v []BlockBasicUtil) {
	o.Blocks = v
}

// GetSize returns the Size field value
func (o *SpaceBasicUtil) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SpaceBasicUtil) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SpaceBasicUtil) SetSize(v int32) {
	o.Size = v
}

// GetUsed returns the Used field value
func (o *SpaceBasicUtil) GetUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *SpaceBasicUtil) GetUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *SpaceBasicUtil) SetUsed(v int32) {
	o.Used = v
}

func (o SpaceBasicUtil) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceBasicUtil) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["desc"] = o.Desc
	toSerialize["blocks"] = o.Blocks
	toSerialize["size"] = o.Size
	toSerialize["used"] = o.Used
	return toSerialize, nil
}

func (o *SpaceBasicUtil) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"desc",
		"blocks",
		"size",
		"used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpaceBasicUtil := _SpaceBasicUtil{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpaceBasicUtil)

	if err != nil {
		return err
	}

	*o = SpaceBasicUtil(varSpaceBasicUtil)

	return err
}

type NullableSpaceBasicUtil struct {
	value *SpaceBasicUtil
	isSet bool
}

func (v NullableSpaceBasicUtil) Get() *SpaceBasicUtil {
	return v.value
}

func (v *NullableSpaceBasicUtil) Set(val *SpaceBasicUtil) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceBasicUtil) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceBasicUtil) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceBasicUtil(val *SpaceBasicUtil) *NullableSpaceBasicUtil {
	return &NullableSpaceBasicUtil{value: val, isSet: true}
}

func (v NullableSpaceBasicUtil) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceBasicUtil) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


