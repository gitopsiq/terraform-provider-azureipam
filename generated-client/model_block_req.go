/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockReq{}

// BlockReq DOCSTRING
type BlockReq struct {
	Name string `json:"name"`
	Cidr string `json:"cidr" validate:"regexp=x.x.x.x\\/x"`
}

type _BlockReq BlockReq

// NewBlockReq instantiates a new BlockReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockReq(name string, cidr string) *BlockReq {
	this := BlockReq{}
	this.Name = name
	this.Cidr = cidr
	return &this
}

// NewBlockReqWithDefaults instantiates a new BlockReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockReqWithDefaults() *BlockReq {
	this := BlockReq{}
	return &this
}

// GetName returns the Name field value
func (o *BlockReq) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BlockReq) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BlockReq) SetName(v string) {
	o.Name = v
}

// GetCidr returns the Cidr field value
func (o *BlockReq) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *BlockReq) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *BlockReq) SetCidr(v string) {
	o.Cidr = v
}

func (o BlockReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cidr"] = o.Cidr
	return toSerialize, nil
}

func (o *BlockReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockReq := _BlockReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockReq)

	if err != nil {
		return err
	}

	*o = BlockReq(varBlockReq)

	return err
}

type NullableBlockReq struct {
	value *BlockReq
	isSet bool
}

func (v NullableBlockReq) Get() *BlockReq {
	return v.value
}

func (v *NullableBlockReq) Set(val *BlockReq) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockReq) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockReq(val *BlockReq) *NullableBlockReq {
	return &NullableBlockReq{value: val, isSet: true}
}

func (v NullableBlockReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


