/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpaceCIDRReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceCIDRReq{}

// SpaceCIDRReq DOCSTRING
type SpaceCIDRReq struct {
	Blocks []interface{} `json:"blocks"`
	Size int32 `json:"size"`
	Desc NullableString `json:"desc,omitempty"`
	ReverseSearch NullableBool `json:"reverse_search,omitempty"`
	SmallestCidr NullableBool `json:"smallest_cidr,omitempty"`
}

type _SpaceCIDRReq SpaceCIDRReq

// NewSpaceCIDRReq instantiates a new SpaceCIDRReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceCIDRReq(blocks []interface{}, size int32) *SpaceCIDRReq {
	this := SpaceCIDRReq{}
	this.Blocks = blocks
	this.Size = size
	return &this
}

// NewSpaceCIDRReqWithDefaults instantiates a new SpaceCIDRReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceCIDRReqWithDefaults() *SpaceCIDRReq {
	this := SpaceCIDRReq{}
	return &this
}

// GetBlocks returns the Blocks field value
func (o *SpaceCIDRReq) GetBlocks() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value
// and a boolean to check if the value has been set.
func (o *SpaceCIDRReq) GetBlocksOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blocks, true
}

// SetBlocks sets field value
func (o *SpaceCIDRReq) SetBlocks(v []interface{}) {
	o.Blocks = v
}

// GetSize returns the Size field value
func (o *SpaceCIDRReq) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SpaceCIDRReq) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SpaceCIDRReq) SetSize(v int32) {
	o.Size = v
}

// GetDesc returns the Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpaceCIDRReq) GetDesc() string {
	if o == nil || IsNil(o.Desc.Get()) {
		var ret string
		return ret
	}
	return *o.Desc.Get()
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpaceCIDRReq) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Desc.Get(), o.Desc.IsSet()
}

// HasDesc returns a boolean if a field has been set.
func (o *SpaceCIDRReq) HasDesc() bool {
	if o != nil && o.Desc.IsSet() {
		return true
	}

	return false
}

// SetDesc gets a reference to the given NullableString and assigns it to the Desc field.
func (o *SpaceCIDRReq) SetDesc(v string) {
	o.Desc.Set(&v)
}
// SetDescNil sets the value for Desc to be an explicit nil
func (o *SpaceCIDRReq) SetDescNil() {
	o.Desc.Set(nil)
}

// UnsetDesc ensures that no value is present for Desc, not even an explicit nil
func (o *SpaceCIDRReq) UnsetDesc() {
	o.Desc.Unset()
}

// GetReverseSearch returns the ReverseSearch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpaceCIDRReq) GetReverseSearch() bool {
	if o == nil || IsNil(o.ReverseSearch.Get()) {
		var ret bool
		return ret
	}
	return *o.ReverseSearch.Get()
}

// GetReverseSearchOk returns a tuple with the ReverseSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpaceCIDRReq) GetReverseSearchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReverseSearch.Get(), o.ReverseSearch.IsSet()
}

// HasReverseSearch returns a boolean if a field has been set.
func (o *SpaceCIDRReq) HasReverseSearch() bool {
	if o != nil && o.ReverseSearch.IsSet() {
		return true
	}

	return false
}

// SetReverseSearch gets a reference to the given NullableBool and assigns it to the ReverseSearch field.
func (o *SpaceCIDRReq) SetReverseSearch(v bool) {
	o.ReverseSearch.Set(&v)
}
// SetReverseSearchNil sets the value for ReverseSearch to be an explicit nil
func (o *SpaceCIDRReq) SetReverseSearchNil() {
	o.ReverseSearch.Set(nil)
}

// UnsetReverseSearch ensures that no value is present for ReverseSearch, not even an explicit nil
func (o *SpaceCIDRReq) UnsetReverseSearch() {
	o.ReverseSearch.Unset()
}

// GetSmallestCidr returns the SmallestCidr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpaceCIDRReq) GetSmallestCidr() bool {
	if o == nil || IsNil(o.SmallestCidr.Get()) {
		var ret bool
		return ret
	}
	return *o.SmallestCidr.Get()
}

// GetSmallestCidrOk returns a tuple with the SmallestCidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpaceCIDRReq) GetSmallestCidrOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmallestCidr.Get(), o.SmallestCidr.IsSet()
}

// HasSmallestCidr returns a boolean if a field has been set.
func (o *SpaceCIDRReq) HasSmallestCidr() bool {
	if o != nil && o.SmallestCidr.IsSet() {
		return true
	}

	return false
}

// SetSmallestCidr gets a reference to the given NullableBool and assigns it to the SmallestCidr field.
func (o *SpaceCIDRReq) SetSmallestCidr(v bool) {
	o.SmallestCidr.Set(&v)
}
// SetSmallestCidrNil sets the value for SmallestCidr to be an explicit nil
func (o *SpaceCIDRReq) SetSmallestCidrNil() {
	o.SmallestCidr.Set(nil)
}

// UnsetSmallestCidr ensures that no value is present for SmallestCidr, not even an explicit nil
func (o *SpaceCIDRReq) UnsetSmallestCidr() {
	o.SmallestCidr.Unset()
}

func (o SpaceCIDRReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceCIDRReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blocks"] = o.Blocks
	toSerialize["size"] = o.Size
	if o.Desc.IsSet() {
		toSerialize["desc"] = o.Desc.Get()
	}
	if o.ReverseSearch.IsSet() {
		toSerialize["reverse_search"] = o.ReverseSearch.Get()
	}
	if o.SmallestCidr.IsSet() {
		toSerialize["smallest_cidr"] = o.SmallestCidr.Get()
	}
	return toSerialize, nil
}

func (o *SpaceCIDRReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blocks",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpaceCIDRReq := _SpaceCIDRReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpaceCIDRReq)

	if err != nil {
		return err
	}

	*o = SpaceCIDRReq(varSpaceCIDRReq)

	return err
}

type NullableSpaceCIDRReq struct {
	value *SpaceCIDRReq
	isSet bool
}

func (v NullableSpaceCIDRReq) Get() *SpaceCIDRReq {
	return v.value
}

func (v *NullableSpaceCIDRReq) Set(val *SpaceCIDRReq) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceCIDRReq) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceCIDRReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceCIDRReq(val *SpaceCIDRReq) *NullableSpaceCIDRReq {
	return &NullableSpaceCIDRReq{value: val, isSet: true}
}

func (v NullableSpaceCIDRReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceCIDRReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


