/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImageDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageDetails{}

// ImageDetails DOCSTRING
type ImageDetails struct {
	ImageId string `json:"image_id"`
	ImageVersion string `json:"image_version"`
	ImageCodename string `json:"image_codename"`
	ImagePrettyName string `json:"image_pretty_name"`
}

type _ImageDetails ImageDetails

// NewImageDetails instantiates a new ImageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageDetails(imageId string, imageVersion string, imageCodename string, imagePrettyName string) *ImageDetails {
	this := ImageDetails{}
	this.ImageId = imageId
	this.ImageVersion = imageVersion
	this.ImageCodename = imageCodename
	this.ImagePrettyName = imagePrettyName
	return &this
}

// NewImageDetailsWithDefaults instantiates a new ImageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageDetailsWithDefaults() *ImageDetails {
	this := ImageDetails{}
	return &this
}

// GetImageId returns the ImageId field value
func (o *ImageDetails) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *ImageDetails) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *ImageDetails) SetImageId(v string) {
	o.ImageId = v
}

// GetImageVersion returns the ImageVersion field value
func (o *ImageDetails) GetImageVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageVersion
}

// GetImageVersionOk returns a tuple with the ImageVersion field value
// and a boolean to check if the value has been set.
func (o *ImageDetails) GetImageVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageVersion, true
}

// SetImageVersion sets field value
func (o *ImageDetails) SetImageVersion(v string) {
	o.ImageVersion = v
}

// GetImageCodename returns the ImageCodename field value
func (o *ImageDetails) GetImageCodename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageCodename
}

// GetImageCodenameOk returns a tuple with the ImageCodename field value
// and a boolean to check if the value has been set.
func (o *ImageDetails) GetImageCodenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageCodename, true
}

// SetImageCodename sets field value
func (o *ImageDetails) SetImageCodename(v string) {
	o.ImageCodename = v
}

// GetImagePrettyName returns the ImagePrettyName field value
func (o *ImageDetails) GetImagePrettyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImagePrettyName
}

// GetImagePrettyNameOk returns a tuple with the ImagePrettyName field value
// and a boolean to check if the value has been set.
func (o *ImageDetails) GetImagePrettyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImagePrettyName, true
}

// SetImagePrettyName sets field value
func (o *ImageDetails) SetImagePrettyName(v string) {
	o.ImagePrettyName = v
}

func (o ImageDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_id"] = o.ImageId
	toSerialize["image_version"] = o.ImageVersion
	toSerialize["image_codename"] = o.ImageCodename
	toSerialize["image_pretty_name"] = o.ImagePrettyName
	return toSerialize, nil
}

func (o *ImageDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_id",
		"image_version",
		"image_codename",
		"image_pretty_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageDetails := _ImageDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageDetails)

	if err != nil {
		return err
	}

	*o = ImageDetails(varImageDetails)

	return err
}

type NullableImageDetails struct {
	value *ImageDetails
	isSet bool
}

func (v NullableImageDetails) Get() *ImageDetails {
	return v.value
}

func (v *NullableImageDetails) Set(val *ImageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableImageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableImageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageDetails(val *ImageDetails) *NullableImageDetails {
	return &NullableImageDetails{value: val, isSet: true}
}

func (v NullableImageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


