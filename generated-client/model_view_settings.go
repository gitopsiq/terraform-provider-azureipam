/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewSettings{}

// ViewSettings struct for ViewSettings
type ViewSettings struct {
	Values map[string]map[string]interface{} `json:"values"`
	Order []string `json:"order"`
	Sort map[string]interface{} `json:"sort,omitempty"`
}

type _ViewSettings ViewSettings

// NewViewSettings instantiates a new ViewSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewSettings(values map[string]map[string]interface{}, order []string) *ViewSettings {
	this := ViewSettings{}
	this.Values = values
	this.Order = order
	return &this
}

// NewViewSettingsWithDefaults instantiates a new ViewSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewSettingsWithDefaults() *ViewSettings {
	this := ViewSettings{}
	return &this
}

// GetValues returns the Values field value
func (o *ViewSettings) GetValues() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *ViewSettings) GetValuesOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *ViewSettings) SetValues(v map[string]map[string]interface{}) {
	o.Values = v
}

// GetOrder returns the Order field value
func (o *ViewSettings) GetOrder() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *ViewSettings) GetOrderOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order, true
}

// SetOrder sets field value
func (o *ViewSettings) SetOrder(v []string) {
	o.Order = v
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewSettings) GetSort() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewSettings) GetSortOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sort) {
		return map[string]interface{}{}, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *ViewSettings) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given map[string]interface{} and assigns it to the Sort field.
func (o *ViewSettings) SetSort(v map[string]interface{}) {
	o.Sort = v
}

func (o ViewSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	toSerialize["order"] = o.Order
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

func (o *ViewSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
		"order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewSettings := _ViewSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewSettings)

	if err != nil {
		return err
	}

	*o = ViewSettings(varViewSettings)

	return err
}

type NullableViewSettings struct {
	value *ViewSettings
	isSet bool
}

func (v NullableViewSettings) Get() *ViewSettings {
	return v.value
}

func (v *NullableViewSettings) Set(val *ViewSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableViewSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableViewSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewSettings(val *ViewSettings) *NullableViewSettings {
	return &NullableViewSettings{value: val, isSet: true}
}

func (v NullableViewSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


