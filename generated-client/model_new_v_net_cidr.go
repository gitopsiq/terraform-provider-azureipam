/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NewVNetCIDR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewVNetCIDR{}

// NewVNetCIDR DOCSTRING
type NewVNetCIDR struct {
	Space string `json:"space"`
	Block string `json:"block"`
	Cidr string `json:"cidr"`
}

type _NewVNetCIDR NewVNetCIDR

// NewNewVNetCIDR instantiates a new NewVNetCIDR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewVNetCIDR(space string, block string, cidr string) *NewVNetCIDR {
	this := NewVNetCIDR{}
	this.Space = space
	this.Block = block
	this.Cidr = cidr
	return &this
}

// NewNewVNetCIDRWithDefaults instantiates a new NewVNetCIDR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewVNetCIDRWithDefaults() *NewVNetCIDR {
	this := NewVNetCIDR{}
	return &this
}

// GetSpace returns the Space field value
func (o *NewVNetCIDR) GetSpace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Space
}

// GetSpaceOk returns a tuple with the Space field value
// and a boolean to check if the value has been set.
func (o *NewVNetCIDR) GetSpaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Space, true
}

// SetSpace sets field value
func (o *NewVNetCIDR) SetSpace(v string) {
	o.Space = v
}

// GetBlock returns the Block field value
func (o *NewVNetCIDR) GetBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Block
}

// GetBlockOk returns a tuple with the Block field value
// and a boolean to check if the value has been set.
func (o *NewVNetCIDR) GetBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Block, true
}

// SetBlock sets field value
func (o *NewVNetCIDR) SetBlock(v string) {
	o.Block = v
}

// GetCidr returns the Cidr field value
func (o *NewVNetCIDR) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *NewVNetCIDR) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *NewVNetCIDR) SetCidr(v string) {
	o.Cidr = v
}

func (o NewVNetCIDR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewVNetCIDR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["space"] = o.Space
	toSerialize["block"] = o.Block
	toSerialize["cidr"] = o.Cidr
	return toSerialize, nil
}

func (o *NewVNetCIDR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"space",
		"block",
		"cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewVNetCIDR := _NewVNetCIDR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewVNetCIDR)

	if err != nil {
		return err
	}

	*o = NewVNetCIDR(varNewVNetCIDR)

	return err
}

type NullableNewVNetCIDR struct {
	value *NewVNetCIDR
	isSet bool
}

func (v NullableNewVNetCIDR) Get() *NewVNetCIDR {
	return v.value
}

func (v *NullableNewVNetCIDR) Set(val *NewVNetCIDR) {
	v.value = val
	v.isSet = true
}

func (v NullableNewVNetCIDR) IsSet() bool {
	return v.isSet
}

func (v *NullableNewVNetCIDR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewVNetCIDR(val *NewVNetCIDR) *NullableNewVNetCIDR {
	return &NullableNewVNetCIDR{value: val, isSet: true}
}

func (v NullableNewVNetCIDR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewVNetCIDR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


