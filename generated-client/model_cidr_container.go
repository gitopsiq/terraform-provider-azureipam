/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CIDRContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CIDRContainer{}

// CIDRContainer struct for CIDRContainer
type CIDRContainer struct {
	Space string `json:"space"`
	Block string `json:"block"`
}

type _CIDRContainer CIDRContainer

// NewCIDRContainer instantiates a new CIDRContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCIDRContainer(space string, block string) *CIDRContainer {
	this := CIDRContainer{}
	this.Space = space
	this.Block = block
	return &this
}

// NewCIDRContainerWithDefaults instantiates a new CIDRContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCIDRContainerWithDefaults() *CIDRContainer {
	this := CIDRContainer{}
	return &this
}

// GetSpace returns the Space field value
func (o *CIDRContainer) GetSpace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Space
}

// GetSpaceOk returns a tuple with the Space field value
// and a boolean to check if the value has been set.
func (o *CIDRContainer) GetSpaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Space, true
}

// SetSpace sets field value
func (o *CIDRContainer) SetSpace(v string) {
	o.Space = v
}

// GetBlock returns the Block field value
func (o *CIDRContainer) GetBlock() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Block
}

// GetBlockOk returns a tuple with the Block field value
// and a boolean to check if the value has been set.
func (o *CIDRContainer) GetBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Block, true
}

// SetBlock sets field value
func (o *CIDRContainer) SetBlock(v string) {
	o.Block = v
}

func (o CIDRContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CIDRContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["space"] = o.Space
	toSerialize["block"] = o.Block
	return toSerialize, nil
}

func (o *CIDRContainer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"space",
		"block",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCIDRContainer := _CIDRContainer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCIDRContainer)

	if err != nil {
		return err
	}

	*o = CIDRContainer(varCIDRContainer)

	return err
}

type NullableCIDRContainer struct {
	value *CIDRContainer
	isSet bool
}

func (v NullableCIDRContainer) Get() *CIDRContainer {
	return v.value
}

func (v *NullableCIDRContainer) Set(val *CIDRContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableCIDRContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableCIDRContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCIDRContainer(val *CIDRContainer) *NullableCIDRContainer {
	return &NullableCIDRContainer{value: val, isSet: true}
}

func (v NullableCIDRContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCIDRContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


