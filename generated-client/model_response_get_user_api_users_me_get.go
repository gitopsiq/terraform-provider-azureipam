/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// ResponseGetUserApiUsersMeGet struct for ResponseGetUserApiUsersMeGet
type ResponseGetUserApiUsersMeGet struct {
	User *User
	UserExpand *UserExpand
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseGetUserApiUsersMeGet) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into User
	err = json.Unmarshal(data, &dst.User);
	if err == nil {
		jsonUser, _ := json.Marshal(dst.User)
		if string(jsonUser) == "{}" { // empty struct
			dst.User = nil
		} else {
			return nil // data stored in dst.User, return on the first match
		}
	} else {
		dst.User = nil
	}

	// try to unmarshal JSON data into UserExpand
	err = json.Unmarshal(data, &dst.UserExpand);
	if err == nil {
		jsonUserExpand, _ := json.Marshal(dst.UserExpand)
		if string(jsonUserExpand) == "{}" { // empty struct
			dst.UserExpand = nil
		} else {
			return nil // data stored in dst.UserExpand, return on the first match
		}
	} else {
		dst.UserExpand = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResponseGetUserApiUsersMeGet)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResponseGetUserApiUsersMeGet) MarshalJSON() ([]byte, error) {
	if src.User != nil {
		return json.Marshal(&src.User)
	}

	if src.UserExpand != nil {
		return json.Marshal(&src.UserExpand)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableResponseGetUserApiUsersMeGet struct {
	value *ResponseGetUserApiUsersMeGet
	isSet bool
}

func (v NullableResponseGetUserApiUsersMeGet) Get() *ResponseGetUserApiUsersMeGet {
	return v.value
}

func (v *NullableResponseGetUserApiUsersMeGet) Set(val *ResponseGetUserApiUsersMeGet) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseGetUserApiUsersMeGet) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseGetUserApiUsersMeGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseGetUserApiUsersMeGet(val *ResponseGetUserApiUsersMeGet) *NullableResponseGetUserApiUsersMeGet {
	return &NullableResponseGetUserApiUsersMeGet{value: val, isSet: true}
}

func (v NullableResponseGetUserApiUsersMeGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseGetUserApiUsersMeGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


