/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BlockCIDRReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockCIDRReq{}

// BlockCIDRReq DOCSTRING
type BlockCIDRReq struct {
	Size NullableInt32 `json:"size,omitempty"`
	Cidr NullableString `json:"cidr,omitempty" validate:"regexp=x.x.x.x\\/x"`
	Desc NullableString `json:"desc,omitempty"`
	ReverseSearch NullableBool `json:"reverse_search,omitempty"`
	SmallestCidr NullableBool `json:"smallest_cidr,omitempty"`
}

// NewBlockCIDRReq instantiates a new BlockCIDRReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockCIDRReq() *BlockCIDRReq {
	this := BlockCIDRReq{}
	return &this
}

// NewBlockCIDRReqWithDefaults instantiates a new BlockCIDRReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockCIDRReqWithDefaults() *BlockCIDRReq {
	this := BlockCIDRReq{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockCIDRReq) GetSize() int32 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int32
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockCIDRReq) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *BlockCIDRReq) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt32 and assigns it to the Size field.
func (o *BlockCIDRReq) SetSize(v int32) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *BlockCIDRReq) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *BlockCIDRReq) UnsetSize() {
	o.Size.Unset()
}

// GetCidr returns the Cidr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockCIDRReq) GetCidr() string {
	if o == nil || IsNil(o.Cidr.Get()) {
		var ret string
		return ret
	}
	return *o.Cidr.Get()
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockCIDRReq) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cidr.Get(), o.Cidr.IsSet()
}

// HasCidr returns a boolean if a field has been set.
func (o *BlockCIDRReq) HasCidr() bool {
	if o != nil && o.Cidr.IsSet() {
		return true
	}

	return false
}

// SetCidr gets a reference to the given NullableString and assigns it to the Cidr field.
func (o *BlockCIDRReq) SetCidr(v string) {
	o.Cidr.Set(&v)
}
// SetCidrNil sets the value for Cidr to be an explicit nil
func (o *BlockCIDRReq) SetCidrNil() {
	o.Cidr.Set(nil)
}

// UnsetCidr ensures that no value is present for Cidr, not even an explicit nil
func (o *BlockCIDRReq) UnsetCidr() {
	o.Cidr.Unset()
}

// GetDesc returns the Desc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockCIDRReq) GetDesc() string {
	if o == nil || IsNil(o.Desc.Get()) {
		var ret string
		return ret
	}
	return *o.Desc.Get()
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockCIDRReq) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Desc.Get(), o.Desc.IsSet()
}

// HasDesc returns a boolean if a field has been set.
func (o *BlockCIDRReq) HasDesc() bool {
	if o != nil && o.Desc.IsSet() {
		return true
	}

	return false
}

// SetDesc gets a reference to the given NullableString and assigns it to the Desc field.
func (o *BlockCIDRReq) SetDesc(v string) {
	o.Desc.Set(&v)
}
// SetDescNil sets the value for Desc to be an explicit nil
func (o *BlockCIDRReq) SetDescNil() {
	o.Desc.Set(nil)
}

// UnsetDesc ensures that no value is present for Desc, not even an explicit nil
func (o *BlockCIDRReq) UnsetDesc() {
	o.Desc.Unset()
}

// GetReverseSearch returns the ReverseSearch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockCIDRReq) GetReverseSearch() bool {
	if o == nil || IsNil(o.ReverseSearch.Get()) {
		var ret bool
		return ret
	}
	return *o.ReverseSearch.Get()
}

// GetReverseSearchOk returns a tuple with the ReverseSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockCIDRReq) GetReverseSearchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReverseSearch.Get(), o.ReverseSearch.IsSet()
}

// HasReverseSearch returns a boolean if a field has been set.
func (o *BlockCIDRReq) HasReverseSearch() bool {
	if o != nil && o.ReverseSearch.IsSet() {
		return true
	}

	return false
}

// SetReverseSearch gets a reference to the given NullableBool and assigns it to the ReverseSearch field.
func (o *BlockCIDRReq) SetReverseSearch(v bool) {
	o.ReverseSearch.Set(&v)
}
// SetReverseSearchNil sets the value for ReverseSearch to be an explicit nil
func (o *BlockCIDRReq) SetReverseSearchNil() {
	o.ReverseSearch.Set(nil)
}

// UnsetReverseSearch ensures that no value is present for ReverseSearch, not even an explicit nil
func (o *BlockCIDRReq) UnsetReverseSearch() {
	o.ReverseSearch.Unset()
}

// GetSmallestCidr returns the SmallestCidr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlockCIDRReq) GetSmallestCidr() bool {
	if o == nil || IsNil(o.SmallestCidr.Get()) {
		var ret bool
		return ret
	}
	return *o.SmallestCidr.Get()
}

// GetSmallestCidrOk returns a tuple with the SmallestCidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlockCIDRReq) GetSmallestCidrOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmallestCidr.Get(), o.SmallestCidr.IsSet()
}

// HasSmallestCidr returns a boolean if a field has been set.
func (o *BlockCIDRReq) HasSmallestCidr() bool {
	if o != nil && o.SmallestCidr.IsSet() {
		return true
	}

	return false
}

// SetSmallestCidr gets a reference to the given NullableBool and assigns it to the SmallestCidr field.
func (o *BlockCIDRReq) SetSmallestCidr(v bool) {
	o.SmallestCidr.Set(&v)
}
// SetSmallestCidrNil sets the value for SmallestCidr to be an explicit nil
func (o *BlockCIDRReq) SetSmallestCidrNil() {
	o.SmallestCidr.Set(nil)
}

// UnsetSmallestCidr ensures that no value is present for SmallestCidr, not even an explicit nil
func (o *BlockCIDRReq) UnsetSmallestCidr() {
	o.SmallestCidr.Unset()
}

func (o BlockCIDRReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockCIDRReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.Cidr.IsSet() {
		toSerialize["cidr"] = o.Cidr.Get()
	}
	if o.Desc.IsSet() {
		toSerialize["desc"] = o.Desc.Get()
	}
	if o.ReverseSearch.IsSet() {
		toSerialize["reverse_search"] = o.ReverseSearch.Get()
	}
	if o.SmallestCidr.IsSet() {
		toSerialize["smallest_cidr"] = o.SmallestCidr.Get()
	}
	return toSerialize, nil
}

type NullableBlockCIDRReq struct {
	value *BlockCIDRReq
	isSet bool
}

func (v NullableBlockCIDRReq) Get() *BlockCIDRReq {
	return v.value
}

func (v *NullableBlockCIDRReq) Set(val *BlockCIDRReq) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockCIDRReq) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockCIDRReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockCIDRReq(val *BlockCIDRReq) *NullableBlockCIDRReq {
	return &NullableBlockCIDRReq{value: val, isSet: true}
}

func (v NullableBlockCIDRReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockCIDRReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


