/*
Azure IPAM

 Azure IPAM is a lightweight solution developed on top of the Azure platform designed to help Azure customers manage their enterprise IP Address space easily and effectively. 

API version: 3.4.0
Contact: ipam@microsoft.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NewSubnetCIDR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewSubnetCIDR{}

// NewSubnetCIDR DOCSTRING
type NewSubnetCIDR struct {
	VnetName string `json:"vnet_name"`
	ResourceGroup string `json:"resource_group"`
	SubscriptionId string `json:"subscription_id"`
	Cidr string `json:"cidr"`
}

type _NewSubnetCIDR NewSubnetCIDR

// NewNewSubnetCIDR instantiates a new NewSubnetCIDR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewSubnetCIDR(vnetName string, resourceGroup string, subscriptionId string, cidr string) *NewSubnetCIDR {
	this := NewSubnetCIDR{}
	this.VnetName = vnetName
	this.ResourceGroup = resourceGroup
	this.SubscriptionId = subscriptionId
	this.Cidr = cidr
	return &this
}

// NewNewSubnetCIDRWithDefaults instantiates a new NewSubnetCIDR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewSubnetCIDRWithDefaults() *NewSubnetCIDR {
	this := NewSubnetCIDR{}
	return &this
}

// GetVnetName returns the VnetName field value
func (o *NewSubnetCIDR) GetVnetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VnetName
}

// GetVnetNameOk returns a tuple with the VnetName field value
// and a boolean to check if the value has been set.
func (o *NewSubnetCIDR) GetVnetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VnetName, true
}

// SetVnetName sets field value
func (o *NewSubnetCIDR) SetVnetName(v string) {
	o.VnetName = v
}

// GetResourceGroup returns the ResourceGroup field value
func (o *NewSubnetCIDR) GetResourceGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value
// and a boolean to check if the value has been set.
func (o *NewSubnetCIDR) GetResourceGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroup, true
}

// SetResourceGroup sets field value
func (o *NewSubnetCIDR) SetResourceGroup(v string) {
	o.ResourceGroup = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *NewSubnetCIDR) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *NewSubnetCIDR) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *NewSubnetCIDR) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetCidr returns the Cidr field value
func (o *NewSubnetCIDR) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *NewSubnetCIDR) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *NewSubnetCIDR) SetCidr(v string) {
	o.Cidr = v
}

func (o NewSubnetCIDR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewSubnetCIDR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vnet_name"] = o.VnetName
	toSerialize["resource_group"] = o.ResourceGroup
	toSerialize["subscription_id"] = o.SubscriptionId
	toSerialize["cidr"] = o.Cidr
	return toSerialize, nil
}

func (o *NewSubnetCIDR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vnet_name",
		"resource_group",
		"subscription_id",
		"cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewSubnetCIDR := _NewSubnetCIDR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewSubnetCIDR)

	if err != nil {
		return err
	}

	*o = NewSubnetCIDR(varNewSubnetCIDR)

	return err
}

type NullableNewSubnetCIDR struct {
	value *NewSubnetCIDR
	isSet bool
}

func (v NullableNewSubnetCIDR) Get() *NewSubnetCIDR {
	return v.value
}

func (v *NullableNewSubnetCIDR) Set(val *NewSubnetCIDR) {
	v.value = val
	v.isSet = true
}

func (v NullableNewSubnetCIDR) IsSet() bool {
	return v.isSet
}

func (v *NullableNewSubnetCIDR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewSubnetCIDR(val *NewSubnetCIDR) *NullableNewSubnetCIDR {
	return &NullableNewSubnetCIDR{value: val, isSet: true}
}

func (v NullableNewSubnetCIDR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewSubnetCIDR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


